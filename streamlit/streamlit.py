import streamlit as st
import requests
import os
from dotenv import load_dotenv
from streamlit_option_menu import option_menu
from streamlit.components.v1 import html

load_dotenv()
st.set_page_config(
    page_title="Admin Panel"
)

BASE_URL = os.getenv("BASE_URL")

def authenticate_user(username, password):
    response = requests.post(
        f"{BASE_URL}/login",
        json={"username": username, "password": password},
        verify=False,
    )
    if response.status_code == 200:
        token = response.json().get("access_token")
        if token:
            return token
        st.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    return None


def make_api_call(endpoint, token, method='GET', data=None):
    headers = {"token": token}
    url = f"{BASE_URL}/{endpoint}"
    
    if method == 'GET':
        response = requests.get(url, headers=headers, verify=False,)
    elif method == 'POST':
        response = requests.post(url, headers=headers, json=data, verify=False,)
    
    if response.status_code == 200:
        return response.json()
    
    st.error(f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    return None


def solve_ticket(ticket_id, token):
    response = make_api_call(f"tickets/{ticket_id}", token, method='POST')
    if response:
        st.success(f"–ó–∞–¥–∞—á–∞ {ticket_id} —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É {ticket_id}")

def login_page():
    st.markdown(
        """
        <h1 style="color: #8f00ff; font-size: 2.5rem; font-weight: bold;">
            Qubit Admin Panel
        </h1>
        """,
        unsafe_allow_html=True
    ) 
    st.markdown("### –≤–∞—à —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º–æ–π")

    st.markdown("---")
    st.header("–í—Ö–æ–¥")

    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
    if st.button("–í–æ–π—Ç–∏"):
        token = authenticate_user(username, password)
        if token:
            st.session_state.token = token
            st.session_state.page = "chats"
            st.rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


    st.markdown("---")
    st.caption("¬© 2024 Qubit")



def chats_page():
    st.title("–ß–∞—Ç—ã")
    if "token" not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        st.session_state.page = "login"
        st.rerun()
        return

    token = st.session_state.token
    chats = make_api_call("chats", token)

    if chats:
        sort_option = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
            ["–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ü–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)", "–ü–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)"]
        )

        if sort_option == "–ü–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)":
            chats.sort(key=lambda x: float(x["assurance"]))
        elif sort_option == "–ü–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)":
            chats.sort(key=lambda x: float(x["assurance"]), reverse=True)

        for chat in chats:
            assurance_value = float(chat["assurance"])

            chat_title = f"üí¨ –ß–∞—Ç {chat['id']} (IP: <span style='color:#8f00ff; font-weight: bold;'>{chat['user_ip']}</span>) –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:  <span style='color:#8f00ff; font-weight: bold;'> {assurance_value:.2f}</span>"

            st.markdown(chat_title, unsafe_allow_html=True)
            st.progress(assurance_value)
            with st.expander("–ó–∞–¥–∞—á–∏", expanded=False):

                tickets = make_api_call(f"chats/{chat['id']}", token)
                if tickets:
                    for ticket in tickets:
                        display_ticket(ticket, token)
                else:
                    st.write("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
    else:
        st.write("–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def display_ticket(ticket, token):
    st.markdown("---")
    st.subheader(f"üé´ ID –∑–∞–¥–∞—á–∏: {ticket['id']}")
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**–í–æ–ø—Ä–æ—Å:**")
        st.write(ticket["question"])

    with col2:
        st.write(f"**–û—Ç–≤–µ—Ç:**")
        st.write(ticket["answer"] or "–û—Ç–≤–µ—Ç –µ—â–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

    st.write(f"üìÖ **–î–∞—Ç–∞:** {ticket['date']}")
    st.write(f"üü¢ **–°—Ç–∞—Ç—É—Å:** {'–†–µ—à–µ–Ω–æ' if ticket['solved'] else '–ù–µ —Ä–µ—à–µ–Ω–æ'}")
    if not ticket['solved']:
        if st.button(f"–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É {ticket['id']}", key=f"solve_{ticket['id']}"):
            solve_ticket(ticket["id"], token)


def tickets_page():
    st.title("–ó–∞–¥–∞—á–∏")
    if "token" not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        st.session_state.page = "login"
        st.rerun()
        return

    token = st.session_state.token
    unsolved_tickets = make_api_call("tickets/unsolved", token)

    if unsolved_tickets:
        st.subheader("–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        for ticket in unsolved_tickets:
            display_ticket(ticket, token)


def settings_page():
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    if "token" not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        st.session_state.page = "login"
        st.rerun()
        return

    st.subheader("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    model_options = ["GPT4o", "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å"]

    if "selected_model" not in st.session_state:
        st.session_state.selected_model = model_options[0]

    selected_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        model_options,
        index=model_options.index(st.session_state.selected_model),
    )

    st.session_state.selected_model = selected_model
    st.success(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")


def logout_page():
    st.title("–í—ã—Ö–æ–¥")
    st.session_state.token = None
    st.session_state.page = "login"
    st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
    st.rerun()


def main():
    if "page" not in st.session_state:
        st.session_state.page = "login"
    if "token" not in st.session_state:
        st.session_state.token = None

    with st.sidebar:
        if st.session_state.token:
            selected = option_menu(
                "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
                ["–ß–∞—Ç—ã", "–ó–∞–¥–∞—á–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–í—ã—Ö–æ–¥"],
                icons=["chat", "ticket", "gear", "power"],
                default_index=0,
                orientation="vertical",
            )
        else:
            selected = option_menu(
                "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
                ["–í—Ö–æ–¥"],
                icons=["person"],
                default_index=0,
                orientation="vertical",
            )
    st.logo("https://b3tmy3x.github.io/depl-widget/Qubit-21.png", size="large")
    if selected == "–í—Ö–æ–¥":
        st.session_state.page = "login"
    elif selected == "–ß–∞—Ç—ã":
        st.session_state.page = "chats"
    elif selected == "–ó–∞–¥–∞—á–∏":
        st.session_state.page = "tickets"
    elif selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        st.session_state.page = "settings"
    elif selected == "–í—ã—Ö–æ–¥":
        st.session_state.page = "logout"

    if st.session_state.page == "login":
        login_page()
    elif st.session_state.page == "chats":
        chats_page()
    elif st.session_state.page == "tickets":
        tickets_page()
    elif st.session_state.page == "settings":
        settings_page()
    elif st.session_state.page == "logout":
        logout_page()


st.markdown(
    """
    <style>
    .ef3psqc6 {
        display: none;
    }
    .e16jpq800 {
        display: none;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

if __name__ == "__main__":
    main()
